
Pseudo-Kalman.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000237c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002540  08002540  00012540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002558  08002558  00021b74  2**0
                  CONTENTS
  4 .ARM          00000008  08002558  08002558  00012558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002560  08002560  00021b74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002560  08002560  00012560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002564  08002564  00012564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001b74  20000000  08002568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000373c  20001b74  080040dc  00021b74  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200052b0  080040dc  000252b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021b74  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a237  00000000  00000000  00021ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bc5  00000000  00000000  0002bddb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000900  00000000  00000000  0002d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000840  00000000  00000000  0002e2a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022521  00000000  00000000  0002eae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b58  00000000  00000000  00051001  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca29f  00000000  00000000  00059b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000eb  00000000  00000000  00123df8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a8  00000000  00000000  00123ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00000020  00000000  00000000  0012618c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20001b74 	.word	0x20001b74
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002528 	.word	0x08002528

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20001b78 	.word	0x20001b78
 8000200:	08002528 	.word	0x08002528

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b972 	b.w	8000500 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	4688      	mov	r8, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	d14b      	bne.n	80002da <__udivmoddi4+0xa6>
 8000242:	428a      	cmp	r2, r1
 8000244:	4615      	mov	r5, r2
 8000246:	d967      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000248:	fab2 f282 	clz	r2, r2
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0720 	rsb	r7, r2, #32
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	fa20 f707 	lsr.w	r7, r0, r7
 800025a:	4095      	lsls	r5, r2
 800025c:	ea47 0803 	orr.w	r8, r7, r3
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbb8 f7fe 	udiv	r7, r8, lr
 800026c:	fa1f fc85 	uxth.w	ip, r5
 8000270:	fb0e 8817 	mls	r8, lr, r7, r8
 8000274:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000278:	fb07 f10c 	mul.w	r1, r7, ip
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18eb      	adds	r3, r5, r3
 8000282:	f107 30ff 	add.w	r0, r7, #4294967295
 8000286:	f080 811b 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8118 	bls.w	80004c0 <__udivmoddi4+0x28c>
 8000290:	3f02      	subs	r7, #2
 8000292:	442b      	add	r3, r5
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0fe 	udiv	r0, r3, lr
 800029c:	fb0e 3310 	mls	r3, lr, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a8:	45a4      	cmp	ip, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	192c      	adds	r4, r5, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8107 	bcs.w	80004c4 <__udivmoddi4+0x290>
 80002b6:	45a4      	cmp	ip, r4
 80002b8:	f240 8104 	bls.w	80004c4 <__udivmoddi4+0x290>
 80002bc:	3802      	subs	r0, #2
 80002be:	442c      	add	r4, r5
 80002c0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c4:	eba4 040c 	sub.w	r4, r4, ip
 80002c8:	2700      	movs	r7, #0
 80002ca:	b11e      	cbz	r6, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c6 4300 	strd	r4, r3, [r6]
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xbe>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80eb 	beq.w	80004ba <__udivmoddi4+0x286>
 80002e4:	2700      	movs	r7, #0
 80002e6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ea:	4638      	mov	r0, r7
 80002ec:	4639      	mov	r1, r7
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f783 	clz	r7, r3
 80002f6:	2f00      	cmp	r7, #0
 80002f8:	d147      	bne.n	800038a <__udivmoddi4+0x156>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd0>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80fa 	bhi.w	80004f8 <__udivmoddi4+0x2c4>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	4698      	mov	r8, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000312:	e9c6 4800 	strd	r4, r8, [r6]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xe8>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 808f 	bne.w	8000444 <__udivmoddi4+0x210>
 8000326:	1b49      	subs	r1, r1, r5
 8000328:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800032c:	fa1f f885 	uxth.w	r8, r5
 8000330:	2701      	movs	r7, #1
 8000332:	fbb1 fcfe 	udiv	ip, r1, lr
 8000336:	0c23      	lsrs	r3, r4, #16
 8000338:	fb0e 111c 	mls	r1, lr, ip, r1
 800033c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000340:	fb08 f10c 	mul.w	r1, r8, ip
 8000344:	4299      	cmp	r1, r3
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x124>
 8000348:	18eb      	adds	r3, r5, r3
 800034a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4299      	cmp	r1, r3
 8000352:	f200 80cd 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 8000356:	4684      	mov	ip, r0
 8000358:	1a59      	subs	r1, r3, r1
 800035a:	b2a3      	uxth	r3, r4
 800035c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000360:	fb0e 1410 	mls	r4, lr, r0, r1
 8000364:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000368:	fb08 f800 	mul.w	r8, r8, r0
 800036c:	45a0      	cmp	r8, r4
 800036e:	d907      	bls.n	8000380 <__udivmoddi4+0x14c>
 8000370:	192c      	adds	r4, r5, r4
 8000372:	f100 33ff 	add.w	r3, r0, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x14a>
 8000378:	45a0      	cmp	r8, r4
 800037a:	f200 80b6 	bhi.w	80004ea <__udivmoddi4+0x2b6>
 800037e:	4618      	mov	r0, r3
 8000380:	eba4 0408 	sub.w	r4, r4, r8
 8000384:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000388:	e79f      	b.n	80002ca <__udivmoddi4+0x96>
 800038a:	f1c7 0c20 	rsb	ip, r7, #32
 800038e:	40bb      	lsls	r3, r7
 8000390:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000394:	ea4e 0e03 	orr.w	lr, lr, r3
 8000398:	fa01 f407 	lsl.w	r4, r1, r7
 800039c:	fa20 f50c 	lsr.w	r5, r0, ip
 80003a0:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a8:	4325      	orrs	r5, r4
 80003aa:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ae:	0c2c      	lsrs	r4, r5, #16
 80003b0:	fb08 3319 	mls	r3, r8, r9, r3
 80003b4:	fa1f fa8e 	uxth.w	sl, lr
 80003b8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003bc:	fb09 f40a 	mul.w	r4, r9, sl
 80003c0:	429c      	cmp	r4, r3
 80003c2:	fa02 f207 	lsl.w	r2, r2, r7
 80003c6:	fa00 f107 	lsl.w	r1, r0, r7
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1e 0303 	adds.w	r3, lr, r3
 80003d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d4:	f080 8087 	bcs.w	80004e6 <__udivmoddi4+0x2b2>
 80003d8:	429c      	cmp	r4, r3
 80003da:	f240 8084 	bls.w	80004e6 <__udivmoddi4+0x2b2>
 80003de:	f1a9 0902 	sub.w	r9, r9, #2
 80003e2:	4473      	add	r3, lr
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	b2ad      	uxth	r5, r5
 80003e8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ec:	fb08 3310 	mls	r3, r8, r0, r3
 80003f0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1e 0404 	adds.w	r4, lr, r4
 8000400:	f100 33ff 	add.w	r3, r0, #4294967295
 8000404:	d26b      	bcs.n	80004de <__udivmoddi4+0x2aa>
 8000406:	45a2      	cmp	sl, r4
 8000408:	d969      	bls.n	80004de <__udivmoddi4+0x2aa>
 800040a:	3802      	subs	r0, #2
 800040c:	4474      	add	r4, lr
 800040e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000412:	fba0 8902 	umull	r8, r9, r0, r2
 8000416:	eba4 040a 	sub.w	r4, r4, sl
 800041a:	454c      	cmp	r4, r9
 800041c:	46c2      	mov	sl, r8
 800041e:	464b      	mov	r3, r9
 8000420:	d354      	bcc.n	80004cc <__udivmoddi4+0x298>
 8000422:	d051      	beq.n	80004c8 <__udivmoddi4+0x294>
 8000424:	2e00      	cmp	r6, #0
 8000426:	d069      	beq.n	80004fc <__udivmoddi4+0x2c8>
 8000428:	ebb1 050a 	subs.w	r5, r1, sl
 800042c:	eb64 0403 	sbc.w	r4, r4, r3
 8000430:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000434:	40fd      	lsrs	r5, r7
 8000436:	40fc      	lsrs	r4, r7
 8000438:	ea4c 0505 	orr.w	r5, ip, r5
 800043c:	e9c6 5400 	strd	r5, r4, [r6]
 8000440:	2700      	movs	r7, #0
 8000442:	e747      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f703 	lsr.w	r7, r0, r3
 800044c:	4095      	lsls	r5, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	fa21 f303 	lsr.w	r3, r1, r3
 8000456:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800045a:	4338      	orrs	r0, r7
 800045c:	0c01      	lsrs	r1, r0, #16
 800045e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000462:	fa1f f885 	uxth.w	r8, r5
 8000466:	fb0e 3317 	mls	r3, lr, r7, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb07 f308 	mul.w	r3, r7, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x256>
 800047a:	1869      	adds	r1, r5, r1
 800047c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000480:	d22f      	bcs.n	80004e2 <__udivmoddi4+0x2ae>
 8000482:	428b      	cmp	r3, r1
 8000484:	d92d      	bls.n	80004e2 <__udivmoddi4+0x2ae>
 8000486:	3f02      	subs	r7, #2
 8000488:	4429      	add	r1, r5
 800048a:	1acb      	subs	r3, r1, r3
 800048c:	b281      	uxth	r1, r0
 800048e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000492:	fb0e 3310 	mls	r3, lr, r0, r3
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb00 f308 	mul.w	r3, r0, r8
 800049e:	428b      	cmp	r3, r1
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x27e>
 80004a2:	1869      	adds	r1, r5, r1
 80004a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a8:	d217      	bcs.n	80004da <__udivmoddi4+0x2a6>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d915      	bls.n	80004da <__udivmoddi4+0x2a6>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4429      	add	r1, r5
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b8:	e73b      	b.n	8000332 <__udivmoddi4+0xfe>
 80004ba:	4637      	mov	r7, r6
 80004bc:	4630      	mov	r0, r6
 80004be:	e709      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004c0:	4607      	mov	r7, r0
 80004c2:	e6e7      	b.n	8000294 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fb      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c8:	4541      	cmp	r1, r8
 80004ca:	d2ab      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004cc:	ebb8 0a02 	subs.w	sl, r8, r2
 80004d0:	eb69 020e 	sbc.w	r2, r9, lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4613      	mov	r3, r2
 80004d8:	e7a4      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004da:	4660      	mov	r0, ip
 80004dc:	e7e9      	b.n	80004b2 <__udivmoddi4+0x27e>
 80004de:	4618      	mov	r0, r3
 80004e0:	e795      	b.n	800040e <__udivmoddi4+0x1da>
 80004e2:	4667      	mov	r7, ip
 80004e4:	e7d1      	b.n	800048a <__udivmoddi4+0x256>
 80004e6:	4681      	mov	r9, r0
 80004e8:	e77c      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ea:	3802      	subs	r0, #2
 80004ec:	442c      	add	r4, r5
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0x14c>
 80004f0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f4:	442b      	add	r3, r5
 80004f6:	e72f      	b.n	8000358 <__udivmoddi4+0x124>
 80004f8:	4638      	mov	r0, r7
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xda>
 80004fc:	4637      	mov	r7, r6
 80004fe:	e6e9      	b.n	80002d4 <__udivmoddi4+0xa0>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b2e      	ldr	r3, [pc, #184]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2d      	ldr	r2, [pc, #180]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b2b      	ldr	r3, [pc, #172]	; (80005d8 <MX_GPIO_Init+0xd4>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b27      	ldr	r3, [pc, #156]	; (80005d8 <MX_GPIO_Init+0xd4>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a26      	ldr	r2, [pc, #152]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b20      	ldr	r3, [pc, #128]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a1f      	ldr	r2, [pc, #124]	; (80005d8 <MX_GPIO_Init+0xd4>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b19      	ldr	r3, [pc, #100]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a18      	ldr	r2, [pc, #96]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000578:	f043 0302 	orr.w	r3, r3, #2
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b16      	ldr	r3, [pc, #88]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 7190 	mov.w	r1, #288	; 0x120
 8000590:	4812      	ldr	r0, [pc, #72]	; (80005dc <MX_GPIO_Init+0xd8>)
 8000592:	f000 fdf5 	bl	8001180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000596:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800059a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800059c:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_GPIO_Init+0xdc>)
 800059e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005a4:	f107 0314 	add.w	r3, r7, #20
 80005a8:	4619      	mov	r1, r3
 80005aa:	480e      	ldr	r0, [pc, #56]	; (80005e4 <MX_GPIO_Init+0xe0>)
 80005ac:	f000 fc56 	bl	8000e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PA8 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8;
 80005b0:	f44f 7390 	mov.w	r3, #288	; 0x120
 80005b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4804      	ldr	r0, [pc, #16]	; (80005dc <MX_GPIO_Init+0xd8>)
 80005ca:	f000 fc47 	bl	8000e5c <HAL_GPIO_Init>

}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	; 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40020000 	.word	0x40020000
 80005e0:	10210000 	.word	0x10210000
 80005e4:	40020800 	.word	0x40020800

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	2400      	movs	r4, #0
{
 80005ec:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80005f2:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80005fa:	e9cd 4405 	strd	r4, r4, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fe:	4a1e      	ldr	r2, [pc, #120]	; (8000678 <SystemClock_Config+0x90>)
 8000600:	9400      	str	r4, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	9402      	str	r4, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000606:	6c11      	ldr	r1, [r2, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	4b1c      	ldr	r3, [pc, #112]	; (800067c <SystemClock_Config+0x94>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800060e:	6411      	str	r1, [r2, #64]	; 0x40
 8000610:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000612:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000616:	9200      	str	r2, [sp, #0]
 8000618:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800061a:	9401      	str	r4, [sp, #4]
 800061c:	681a      	ldr	r2, [r3, #0]
 800061e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	681b      	ldr	r3, [r3, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000626:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000628:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800062c:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000632:	2110      	movs	r1, #16
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000634:	2208      	movs	r2, #8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000636:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000638:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 180;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLN = 180;
 800063c:	23b4      	movs	r3, #180	; 0xb4
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800063e:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000640:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000642:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000644:	e9cd 5511 	strd	r5, r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000648:	9513      	str	r5, [sp, #76]	; 0x4c
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064a:	260f      	movs	r6, #15
  RCC_OscInitStruct.PLL.PLLN = 180;
 800064c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f001 f8ba 	bl	80017c8 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000654:	f000 fdae 	bl	80011b4 <HAL_PWREx_EnableOverDrive>
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000658:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000660:	a802      	add	r0, sp, #8
 8000662:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800066a:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800066e:	f000 fdf1 	bl	8001254 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8000672:	b014      	add	sp, #80	; 0x50
 8000674:	bd70      	pop	{r4, r5, r6, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40007000 	.word	0x40007000

08000680 <main>:
{
 8000680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000684:	b091      	sub	sp, #68	; 0x44
  HAL_Init();
 8000686:	f000 fa6f 	bl	8000b68 <HAL_Init>
  SystemClock_Config();
 800068a:	f7ff ffad 	bl	80005e8 <SystemClock_Config>
  MX_GPIO_Init();
 800068e:	f7ff ff39 	bl	8000504 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000692:	f000 f9cd 	bl	8000a30 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000696:	f000 f8b1 	bl	80007fc <MX_SPI2_Init>
  arm_mat_init_f32(&A, srcRows, srcColumns, A_f32);
 800069a:	2218      	movs	r2, #24
 800069c:	4611      	mov	r1, r2
 800069e:	4b44      	ldr	r3, [pc, #272]	; (80007b0 <main+0x130>)
 80006a0:	4e44      	ldr	r6, [pc, #272]	; (80007b4 <main+0x134>)
 80006a2:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80007f4 <main+0x174>
 80006a6:	a802      	add	r0, sp, #8
 80006a8:	f001 ff16 	bl	80024d8 <arm_mat_init_f32>
  arm_mat_init_f32(&AT, srcRows, srcColumns, AT_f32);
 80006ac:	2218      	movs	r2, #24
 80006ae:	4611      	mov	r1, r2
 80006b0:	4b41      	ldr	r3, [pc, #260]	; (80007b8 <main+0x138>)
 80006b2:	a804      	add	r0, sp, #16
 80006b4:	f001 ff10 	bl	80024d8 <arm_mat_init_f32>
  arm_mat_init_f32(&AI, srcRows, srcColumns, AI_f32);
 80006b8:	2218      	movs	r2, #24
 80006ba:	4611      	mov	r1, r2
 80006bc:	eb0d 0002 	add.w	r0, sp, r2
 80006c0:	4b3e      	ldr	r3, [pc, #248]	; (80007bc <main+0x13c>)
 80006c2:	f001 ff09 	bl	80024d8 <arm_mat_init_f32>
  arm_mat_init_f32(&ATMA, srcRows, srcColumns, ATMA_f32);
 80006c6:	2218      	movs	r2, #24
 80006c8:	4611      	mov	r1, r2
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <main+0x140>)
 80006cc:	a808      	add	r0, sp, #32
 80006ce:	f001 ff03 	bl	80024d8 <arm_mat_init_f32>
  arm_mat_init_f32(&ATMAI, srcRows, srcColumns, ATMAI_f32);
 80006d2:	2218      	movs	r2, #24
 80006d4:	4611      	mov	r1, r2
 80006d6:	4b3b      	ldr	r3, [pc, #236]	; (80007c4 <main+0x144>)
 80006d8:	a80a      	add	r0, sp, #40	; 0x28
 80006da:	f001 fefd 	bl	80024d8 <arm_mat_init_f32>
  arm_mat_init_f32(&B, srcRows, srcColumns, (float32_t *)B_f32);
 80006de:	4b3a      	ldr	r3, [pc, #232]	; (80007c8 <main+0x148>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	2118      	movs	r1, #24
 80006e4:	a80c      	add	r0, sp, #48	; 0x30
 80006e6:	f001 fef7 	bl	80024d8 <arm_mat_init_f32>
  arm_mat_init_f32(&X, srcRows, srcColumns, X_f32);
 80006ea:	4b38      	ldr	r3, [pc, #224]	; (80007cc <main+0x14c>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	2118      	movs	r1, #24
 80006f0:	a80e      	add	r0, sp, #56	; 0x38
 80006f2:	f001 fef1 	bl	80024d8 <arm_mat_init_f32>
 80006f6:	4b36      	ldr	r3, [pc, #216]	; (80007d0 <main+0x150>)
 80006f8:	1b9b      	subs	r3, r3, r6
 80006fa:	9301      	str	r3, [sp, #4]
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80006fc:	2201      	movs	r2, #1
 80006fe:	2120      	movs	r1, #32
 8000700:	4834      	ldr	r0, [pc, #208]	; (80007d4 <main+0x154>)
 8000702:	f000 fd3d 	bl	8001180 <HAL_GPIO_WritePin>
	      for (c = 0; c < m; c++) {
 8000706:	4b34      	ldr	r3, [pc, #208]	; (80007d8 <main+0x158>)
 8000708:	4a34      	ldr	r2, [pc, #208]	; (80007dc <main+0x15c>)
 800070a:	f8d3 9000 	ldr.w	r9, [r3]
 800070e:	2300      	movs	r3, #0
 8000710:	4599      	cmp	r9, r3
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	dd41      	ble.n	800079a <main+0x11a>
	        for (d = 0; d < n; d++) {
 8000716:	4a32      	ldr	r2, [pc, #200]	; (80007e0 <main+0x160>)
 8000718:	f8d2 a000 	ldr.w	sl, [r2]
 800071c:	4a31      	ldr	r2, [pc, #196]	; (80007e4 <main+0x164>)
 800071e:	ea4f 0b89 	mov.w	fp, r9, lsl #2
 8000722:	edd2 7a00 	vldr	s15, [r2]
 8000726:	4a30      	ldr	r2, [pc, #192]	; (80007e8 <main+0x168>)
 8000728:	eb06 010b 	add.w	r1, r6, fp
 800072c:	469e      	mov	lr, r3
 800072e:	4e21      	ldr	r6, [pc, #132]	; (80007b4 <main+0x134>)
 8000730:	9b01      	ldr	r3, [sp, #4]
 8000732:	6812      	ldr	r2, [r2, #0]
 8000734:	eba3 0b0b 	sub.w	fp, r3, fp
 8000738:	eb08 0c8a 	add.w	ip, r8, sl, lsl #2
 800073c:	4635      	mov	r5, r6
 800073e:	f1ba 0f00 	cmp.w	sl, #0
 8000742:	dd33      	ble.n	80007ac <main+0x12c>
 8000744:	eb0b 0401 	add.w	r4, fp, r1
 8000748:	4640      	mov	r0, r8
 800074a:	4602      	mov	r2, r0
 800074c:	462b      	mov	r3, r5
	            sum = sum + m1[c][k]*m2[k][d];
 800074e:	ecf3 6a01 	vldmia	r3!, {s13}
 8000752:	4617      	mov	r7, r2
 8000754:	ed97 7a00 	vldr	s14, [r7]
	          for (k = 0; k < m; k++) {
 8000758:	428b      	cmp	r3, r1
	            sum = sum + m1[c][k]*m2[k][d];
 800075a:	f102 0260 	add.w	r2, r2, #96	; 0x60
 800075e:	eee6 7a87 	vfma.f32	s15, s13, s14
	          for (k = 0; k < m; k++) {
 8000762:	d1f4      	bne.n	800074e <main+0xce>
 8000764:	3004      	adds	r0, #4
	        for (d = 0; d < n; d++) {
 8000766:	4560      	cmp	r0, ip
	          multiply[c][d] = sum;
 8000768:	ece4 7a01 	vstmia	r4!, {s15}
	          sum = 0;
 800076c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80007ec <main+0x16c>
	        for (d = 0; d < n; d++) {
 8000770:	d1eb      	bne.n	800074a <main+0xca>
 8000772:	4653      	mov	r3, sl
 8000774:	464a      	mov	r2, r9
 8000776:	f10e 0e01 	add.w	lr, lr, #1
	      for (c = 0; c < m; c++) {
 800077a:	45ce      	cmp	lr, r9
 800077c:	f105 0560 	add.w	r5, r5, #96	; 0x60
 8000780:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8000784:	d1db      	bne.n	800073e <main+0xbe>
 8000786:	4917      	ldr	r1, [pc, #92]	; (80007e4 <main+0x164>)
 8000788:	edc1 7a00 	vstr	s15, [r1]
 800078c:	4916      	ldr	r1, [pc, #88]	; (80007e8 <main+0x168>)
 800078e:	600a      	str	r2, [r1, #0]
 8000790:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <main+0x170>)
 8000792:	6013      	str	r3, [r2, #0]
 8000794:	4b11      	ldr	r3, [pc, #68]	; (80007dc <main+0x15c>)
 8000796:	f8c3 e000 	str.w	lr, [r3]
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	480d      	ldr	r0, [pc, #52]	; (80007d4 <main+0x154>)
 80007a0:	f000 fcee 	bl	8001180 <HAL_GPIO_WritePin>
	  HAL_Delay(10);
 80007a4:	200a      	movs	r0, #10
 80007a6:	f000 fa51 	bl	8000c4c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 80007aa:	e7a7      	b.n	80006fc <main+0x7c>
	        for (d = 0; d < n; d++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	e7e2      	b.n	8000776 <main+0xf6>
 80007b0:	20000000 	.word	0x20000000
 80007b4:	20000964 	.word	0x20000964
 80007b8:	20001b94 	.word	0x20001b94
 80007bc:	20002d9c 	.word	0x20002d9c
 80007c0:	20004914 	.word	0x20004914
 80007c4:	20003700 	.word	0x20003700
 80007c8:	20000900 	.word	0x20000900
 80007cc:	2000369c 	.word	0x2000369c
 80007d0:	20002498 	.word	0x20002498
 80007d4:	40020000 	.word	0x40020000
 80007d8:	20000960 	.word	0x20000960
 80007dc:	20004000 	.word	0x20004000
 80007e0:	20001b64 	.word	0x20001b64
 80007e4:	20001b90 	.word	0x20001b90
 80007e8:	20002d98 	.word	0x20002d98
 80007ec:	00000000 	.word	0x00000000
 80007f0:	20004008 	.word	0x20004008
 80007f4:	20001264 	.word	0x20001264

080007f8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 8000800:	4b17      	ldr	r3, [pc, #92]	; (8000860 <MX_SPI2_Init+0x64>)
 8000802:	4a18      	ldr	r2, [pc, #96]	; (8000864 <MX_SPI2_Init+0x68>)
 8000804:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_SPI2_Init+0x64>)
 8000808:	f44f 7282 	mov.w	r2, #260	; 0x104
 800080c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <MX_SPI2_Init+0x64>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_SPI2_Init+0x64>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800081a:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_SPI2_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000820:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_SPI2_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_SPI2_Init+0x64>)
 8000828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_SPI2_Init+0x64>)
 8000830:	2228      	movs	r2, #40	; 0x28
 8000832:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000834:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <MX_SPI2_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_SPI2_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000840:	4b07      	ldr	r3, [pc, #28]	; (8000860 <MX_SPI2_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_SPI2_Init+0x64>)
 8000848:	220a      	movs	r2, #10
 800084a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800084c:	4804      	ldr	r0, [pc, #16]	; (8000860 <MX_SPI2_Init+0x64>)
 800084e:	f001 fa15 	bl	8001c7c <HAL_SPI_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000858:	f7ff ffce 	bl	80007f8 <Error_Handler>
  }

}
 800085c:	bf00      	nop
 800085e:	bd80      	pop	{r7, pc}
 8000860:	20005214 	.word	0x20005214
 8000864:	40003800 	.word	0x40003800

08000868 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a30      	ldr	r2, [pc, #192]	; (8000948 <HAL_SPI_MspInit+0xe0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d15a      	bne.n	8000940 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b2f      	ldr	r3, [pc, #188]	; (800094c <HAL_SPI_MspInit+0xe4>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000892:	4a2e      	ldr	r2, [pc, #184]	; (800094c <HAL_SPI_MspInit+0xe4>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6413      	str	r3, [r2, #64]	; 0x40
 800089a:	4b2c      	ldr	r3, [pc, #176]	; (800094c <HAL_SPI_MspInit+0xe4>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <HAL_SPI_MspInit+0xe4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a27      	ldr	r2, [pc, #156]	; (800094c <HAL_SPI_MspInit+0xe4>)
 80008b0:	f043 0304 	orr.w	r3, r3, #4
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b25      	ldr	r3, [pc, #148]	; (800094c <HAL_SPI_MspInit+0xe4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0304 	and.w	r3, r3, #4
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_SPI_MspInit+0xe4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a20      	ldr	r2, [pc, #128]	; (800094c <HAL_SPI_MspInit+0xe4>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_SPI_MspInit+0xe4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008de:	2302      	movs	r3, #2
 80008e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 80008ee:	2307      	movs	r3, #7
 80008f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f2:	f107 0314 	add.w	r3, r7, #20
 80008f6:	4619      	mov	r1, r3
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <HAL_SPI_MspInit+0xe8>)
 80008fa:	f000 faaf 	bl	8000e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008fe:	2304      	movs	r3, #4
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000902:	2302      	movs	r3, #2
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090a:	2303      	movs	r3, #3
 800090c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800090e:	2305      	movs	r3, #5
 8000910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <HAL_SPI_MspInit+0xe8>)
 800091a:	f000 fa9f 	bl	8000e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800091e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000930:	2305      	movs	r3, #5
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4806      	ldr	r0, [pc, #24]	; (8000954 <HAL_SPI_MspInit+0xec>)
 800093c:	f000 fa8e 	bl	8000e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000940:	bf00      	nop
 8000942:	3728      	adds	r7, #40	; 0x28
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40003800 	.word	0x40003800
 800094c:	40023800 	.word	0x40023800
 8000950:	40020800 	.word	0x40020800
 8000954:	40020400 	.word	0x40020400

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	; (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096c:	6453      	str	r3, [r2, #68]	; 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	; 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000996:	2007      	movs	r0, #7
 8000998:	f000 fa2c 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099c:	bf00      	nop
 800099e:	3708      	adds	r7, #8
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40023800 	.word	0x40023800

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <HardFault_Handler+0x4>

080009bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <MemManage_Handler+0x4>

080009c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009c6:	e7fe      	b.n	80009c6 <BusFault_Handler+0x4>

080009c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009cc:	e7fe      	b.n	80009cc <UsageFault_Handler+0x4>

080009ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ce:	b480      	push	{r7}
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009d2:	bf00      	nop
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fc:	f000 f906 	bl	8000c0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}

08000a04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a08:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <SystemInit+0x28>)
 8000a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a0e:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <SystemInit+0x28>)
 8000a10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <SystemInit+0x28>)
 8000a1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a1e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a20:	bf00      	nop
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000a34:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_USART2_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	; (8000a7c <MX_USART2_UART_Init+0x4c>)
 8000a68:	f001 f96c 	bl	8001d44 <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a72:	f7ff fec1 	bl	80007f8 <Error_Handler>
  }

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	2000526c 	.word	0x2000526c
 8000a80:	40004400 	.word	0x40004400

08000a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <HAL_UART_MspInit+0x84>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d12b      	bne.n	8000afe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <HAL_UART_MspInit+0x88>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a17      	ldr	r2, [pc, #92]	; (8000b0c <HAL_UART_MspInit+0x88>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HAL_UART_MspInit+0x88>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <HAL_UART_MspInit+0x88>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a10      	ldr	r2, [pc, #64]	; (8000b0c <HAL_UART_MspInit+0x88>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HAL_UART_MspInit+0x88>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ade:	230c      	movs	r3, #12
 8000ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aea:	2303      	movs	r3, #3
 8000aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000aee:	2307      	movs	r3, #7
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	4805      	ldr	r0, [pc, #20]	; (8000b10 <HAL_UART_MspInit+0x8c>)
 8000afa:	f000 f9af 	bl	8000e5c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000afe:	bf00      	nop
 8000b00:	3728      	adds	r7, #40	; 0x28
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40004400 	.word	0x40004400
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000

08000b14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b4c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b18:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b1a:	e003      	b.n	8000b24 <LoopCopyDataInit>

08000b1c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b1c:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b1e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b20:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b22:	3104      	adds	r1, #4

08000b24 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b24:	480b      	ldr	r0, [pc, #44]	; (8000b54 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b28:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b2a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b2c:	d3f6      	bcc.n	8000b1c <CopyDataInit>
  ldr  r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b30:	e002      	b.n	8000b38 <LoopFillZerobss>

08000b32 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b32:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b34:	f842 3b04 	str.w	r3, [r2], #4

08000b38 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b3a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b3c:	d3f9      	bcc.n	8000b32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3e:	f7ff ff61 	bl	8000a04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b42:	f001 fccd 	bl	80024e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b46:	f7ff fd9b 	bl	8000680 <main>
  bx  lr    
 8000b4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b4c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b50:	08002568 	.word	0x08002568
  ldr  r0, =_sdata
 8000b54:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b58:	20001b74 	.word	0x20001b74
  ldr  r2, =_sbss
 8000b5c:	20001b74 	.word	0x20001b74
  ldr  r3, = _ebss
 8000b60:	200052b0 	.word	0x200052b0

08000b64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC_IRQHandler>
	...

08000b68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <HAL_Init+0x40>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <HAL_Init+0x40>)
 8000b72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <HAL_Init+0x40>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ba8 <HAL_Init+0x40>)
 8000b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_Init+0x40>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a07      	ldr	r2, [pc, #28]	; (8000ba8 <HAL_Init+0x40>)
 8000b8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b90:	2003      	movs	r0, #3
 8000b92:	f000 f92f 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f808 	bl	8000bac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b9c:	f7ff fedc 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40023c00 	.word	0x40023c00

08000bac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bb4:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_InitTick+0x54>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b12      	ldr	r3, [pc, #72]	; (8000c04 <HAL_InitTick+0x58>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f939 	bl	8000e42 <HAL_SYSTICK_Config>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e00e      	b.n	8000bf8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2b0f      	cmp	r3, #15
 8000bde:	d80a      	bhi.n	8000bf6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be0:	2200      	movs	r2, #0
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	f000 f90f 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_InitTick+0x5c>)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20001b68 	.word	0x20001b68
 8000c04:	20001b70 	.word	0x20001b70
 8000c08:	20001b6c 	.word	0x20001b6c

08000c0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <HAL_IncTick+0x20>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <HAL_IncTick+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_IncTick+0x24>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	20001b70 	.word	0x20001b70
 8000c30:	200052ac 	.word	0x200052ac

08000c34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return uwTick;
 8000c38:	4b03      	ldr	r3, [pc, #12]	; (8000c48 <HAL_GetTick+0x14>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	200052ac 	.word	0x200052ac

08000c4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c54:	f7ff ffee 	bl	8000c34 <HAL_GetTick>
 8000c58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c64:	d005      	beq.n	8000c72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_Delay+0x40>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c72:	bf00      	nop
 8000c74:	f7ff ffde 	bl	8000c34 <HAL_GetTick>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	429a      	cmp	r2, r3
 8000c82:	d8f7      	bhi.n	8000c74 <HAL_Delay+0x28>
  {
  }
}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20001b70 	.word	0x20001b70

08000c90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b085      	sub	sp, #20
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	f003 0307 	and.w	r3, r3, #7
 8000c9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ca6:	68ba      	ldr	r2, [r7, #8]
 8000ca8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cac:	4013      	ands	r3, r2
 8000cae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cc2:	4a04      	ldr	r2, [pc, #16]	; (8000cd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	60d3      	str	r3, [r2, #12]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	0a1b      	lsrs	r3, r3, #8
 8000ce2:	f003 0307 	and.w	r3, r3, #7
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	db0a      	blt.n	8000d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	490c      	ldr	r1, [pc, #48]	; (8000d40 <__NVIC_SetPriority+0x4c>)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	0112      	lsls	r2, r2, #4
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	440b      	add	r3, r1
 8000d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d1c:	e00a      	b.n	8000d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2da      	uxtb	r2, r3
 8000d22:	4908      	ldr	r1, [pc, #32]	; (8000d44 <__NVIC_SetPriority+0x50>)
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	f003 030f 	and.w	r3, r3, #15
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	0112      	lsls	r2, r2, #4
 8000d2e:	b2d2      	uxtb	r2, r2
 8000d30:	440b      	add	r3, r1
 8000d32:	761a      	strb	r2, [r3, #24]
}
 8000d34:	bf00      	nop
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr
 8000d40:	e000e100 	.word	0xe000e100
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	60f8      	str	r0, [r7, #12]
 8000d50:	60b9      	str	r1, [r7, #8]
 8000d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	f1c3 0307 	rsb	r3, r3, #7
 8000d62:	2b04      	cmp	r3, #4
 8000d64:	bf28      	it	cs
 8000d66:	2304      	movcs	r3, #4
 8000d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	2b06      	cmp	r3, #6
 8000d70:	d902      	bls.n	8000d78 <NVIC_EncodePriority+0x30>
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3b03      	subs	r3, #3
 8000d76:	e000      	b.n	8000d7a <NVIC_EncodePriority+0x32>
 8000d78:	2300      	movs	r3, #0
 8000d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d80:	69bb      	ldr	r3, [r7, #24]
 8000d82:	fa02 f303 	lsl.w	r3, r2, r3
 8000d86:	43da      	mvns	r2, r3
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9a:	43d9      	mvns	r1, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da0:	4313      	orrs	r3, r2
         );
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3724      	adds	r7, #36	; 0x24
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff8e 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff47 	bl	8000c90 <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff5c 	bl	8000cd8 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff8e 	bl	8000d48 <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff ffb0 	bl	8000db0 <SysTick_Config>
 8000e50:	4603      	mov	r3, r0
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e66:	2300      	movs	r3, #0
 8000e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
 8000e76:	e165      	b.n	8001144 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e78:	2201      	movs	r2, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	697a      	ldr	r2, [r7, #20]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	f040 8154 	bne.w	800113e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_GPIO_Init+0x5a>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	2b02      	cmp	r3, #2
 8000ea4:	d007      	beq.n	8000eb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eaa:	2b11      	cmp	r3, #17
 8000eac:	d003      	beq.n	8000eb6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	2b12      	cmp	r3, #18
 8000eb4:	d130      	bne.n	8000f18 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	689b      	ldr	r3, [r3, #8]
 8000eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	005b      	lsls	r3, r3, #1
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43db      	mvns	r3, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4013      	ands	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	68da      	ldr	r2, [r3, #12]
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	091b      	lsrs	r3, r3, #4
 8000f02:	f003 0201 	and.w	r2, r3, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	69ba      	ldr	r2, [r7, #24]
 8000f16:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	2203      	movs	r2, #3
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	689a      	ldr	r2, [r3, #8]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	005b      	lsls	r3, r3, #1
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4313      	orrs	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d003      	beq.n	8000f58 <HAL_GPIO_Init+0xfc>
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	2b12      	cmp	r3, #18
 8000f56:	d123      	bne.n	8000fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	08da      	lsrs	r2, r3, #3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3208      	adds	r2, #8
 8000f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	f003 0307 	and.w	r3, r3, #7
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	220f      	movs	r2, #15
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	43db      	mvns	r3, r3
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	691a      	ldr	r2, [r3, #16]
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f003 0307 	and.w	r3, r3, #7
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	69b9      	ldr	r1, [r7, #24]
 8000f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	2203      	movs	r2, #3
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	43db      	mvns	r3, r3
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	685b      	ldr	r3, [r3, #4]
 8000fbc:	f003 0203 	and.w	r2, r3, #3
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	005b      	lsls	r3, r3, #1
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	f000 80ae 	beq.w	800113e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	4a5b      	ldr	r2, [pc, #364]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8000fec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff2:	4b59      	ldr	r3, [pc, #356]	; (8001158 <HAL_GPIO_Init+0x2fc>)
 8000ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ffa:	60fb      	str	r3, [r7, #12]
 8000ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ffe:	4a57      	ldr	r2, [pc, #348]	; (800115c <HAL_GPIO_Init+0x300>)
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	089b      	lsrs	r3, r3, #2
 8001004:	3302      	adds	r3, #2
 8001006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800100a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	220f      	movs	r2, #15
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x304>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d025      	beq.n	8001076 <HAL_GPIO_Init+0x21a>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x308>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01f      	beq.n	8001072 <HAL_GPIO_Init+0x216>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x30c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x212>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a4b      	ldr	r2, [pc, #300]	; (800116c <HAL_GPIO_Init+0x310>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x20e>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <HAL_GPIO_Init+0x314>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x20a>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a49      	ldr	r2, [pc, #292]	; (8001174 <HAL_GPIO_Init+0x318>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x206>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a48      	ldr	r2, [pc, #288]	; (8001178 <HAL_GPIO_Init+0x31c>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x202>
 800105a:	2306      	movs	r3, #6
 800105c:	e00c      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 800105e:	2307      	movs	r3, #7
 8001060:	e00a      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001062:	2305      	movs	r3, #5
 8001064:	e008      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001066:	2304      	movs	r3, #4
 8001068:	e006      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 800106a:	2303      	movs	r3, #3
 800106c:	e004      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 800106e:	2302      	movs	r3, #2
 8001070:	e002      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <HAL_GPIO_Init+0x21c>
 8001076:	2300      	movs	r3, #0
 8001078:	69fa      	ldr	r2, [r7, #28]
 800107a:	f002 0203 	and.w	r2, r2, #3
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	4093      	lsls	r3, r2
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4313      	orrs	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001088:	4934      	ldr	r1, [pc, #208]	; (800115c <HAL_GPIO_Init+0x300>)
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	089b      	lsrs	r3, r3, #2
 800108e:	3302      	adds	r3, #2
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001096:	4b39      	ldr	r3, [pc, #228]	; (800117c <HAL_GPIO_Init+0x320>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	693b      	ldr	r3, [r7, #16]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010ba:	4a30      	ldr	r2, [pc, #192]	; (800117c <HAL_GPIO_Init+0x320>)
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80010c0:	4b2e      	ldr	r3, [pc, #184]	; (800117c <HAL_GPIO_Init+0x320>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	69ba      	ldr	r2, [r7, #24]
 80010cc:	4013      	ands	r3, r2
 80010ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e4:	4a25      	ldr	r2, [pc, #148]	; (800117c <HAL_GPIO_Init+0x320>)
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <HAL_GPIO_Init+0x320>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	4013      	ands	r3, r2
 80010f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800110e:	4a1b      	ldr	r2, [pc, #108]	; (800117c <HAL_GPIO_Init+0x320>)
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001114:	4b19      	ldr	r3, [pc, #100]	; (800117c <HAL_GPIO_Init+0x320>)
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	43db      	mvns	r3, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4013      	ands	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d003      	beq.n	8001138 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	4313      	orrs	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <HAL_GPIO_Init+0x320>)
 800113a:	69bb      	ldr	r3, [r7, #24]
 800113c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	3301      	adds	r3, #1
 8001142:	61fb      	str	r3, [r7, #28]
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	2b0f      	cmp	r3, #15
 8001148:	f67f ae96 	bls.w	8000e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800114c:	bf00      	nop
 800114e:	3724      	adds	r7, #36	; 0x24
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40023800 	.word	0x40023800
 800115c:	40013800 	.word	0x40013800
 8001160:	40020000 	.word	0x40020000
 8001164:	40020400 	.word	0x40020400
 8001168:	40020800 	.word	0x40020800
 800116c:	40020c00 	.word	0x40020c00
 8001170:	40021000 	.word	0x40021000
 8001174:	40021400 	.word	0x40021400
 8001178:	40021800 	.word	0x40021800
 800117c:	40013c00 	.word	0x40013c00

08001180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001190:	787b      	ldrb	r3, [r7, #1]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001196:	887a      	ldrh	r2, [r7, #2]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800119c:	e003      	b.n	80011a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	041a      	lsls	r2, r3, #16
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	619a      	str	r2, [r3, #24]
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011ba:	2300      	movs	r3, #0
 80011bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c6:	4a1f      	ldr	r2, [pc, #124]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011cc:	6413      	str	r3, [r2, #64]	; 0x40
 80011ce:	4b1d      	ldr	r3, [pc, #116]	; (8001244 <HAL_PWREx_EnableOverDrive+0x90>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	603b      	str	r3, [r7, #0]
 80011d8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011da:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <HAL_PWREx_EnableOverDrive+0x94>)
 80011dc:	2201      	movs	r2, #1
 80011de:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011e0:	f7ff fd28 	bl	8000c34 <HAL_GetTick>
 80011e4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011e6:	e009      	b.n	80011fc <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011e8:	f7ff fd24 	bl	8000c34 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011f6:	d901      	bls.n	80011fc <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e01f      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011fc:	4b13      	ldr	r3, [pc, #76]	; (800124c <HAL_PWREx_EnableOverDrive+0x98>)
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001208:	d1ee      	bne.n	80011e8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800120a:	4b11      	ldr	r3, [pc, #68]	; (8001250 <HAL_PWREx_EnableOverDrive+0x9c>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001210:	f7ff fd10 	bl	8000c34 <HAL_GetTick>
 8001214:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001216:	e009      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001218:	f7ff fd0c 	bl	8000c34 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001226:	d901      	bls.n	800122c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e007      	b.n	800123c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800122c:	4b07      	ldr	r3, [pc, #28]	; (800124c <HAL_PWREx_EnableOverDrive+0x98>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001234:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001238:	d1ee      	bne.n	8001218 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	420e0040 	.word	0x420e0040
 800124c:	40007000 	.word	0x40007000
 8001250:	420e0044 	.word	0x420e0044

08001254 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e0cc      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001268:	4b68      	ldr	r3, [pc, #416]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	683a      	ldr	r2, [r7, #0]
 8001272:	429a      	cmp	r2, r3
 8001274:	d90c      	bls.n	8001290 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001276:	4b65      	ldr	r3, [pc, #404]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001278:	683a      	ldr	r2, [r7, #0]
 800127a:	b2d2      	uxtb	r2, r2
 800127c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800127e:	4b63      	ldr	r3, [pc, #396]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 030f 	and.w	r3, r3, #15
 8001286:	683a      	ldr	r2, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	d001      	beq.n	8001290 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e0b8      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0302 	and.w	r3, r3, #2
 8001298:	2b00      	cmp	r3, #0
 800129a:	d020      	beq.n	80012de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a8:	4b59      	ldr	r3, [pc, #356]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	4a58      	ldr	r2, [pc, #352]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80012b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0308 	and.w	r3, r3, #8
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d005      	beq.n	80012cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	4a52      	ldr	r2, [pc, #328]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80012ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012cc:	4b50      	ldr	r3, [pc, #320]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	494d      	ldr	r1, [pc, #308]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d044      	beq.n	8001374 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d107      	bne.n	8001302 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012f2:	4b47      	ldr	r3, [pc, #284]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d119      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e07f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d003      	beq.n	8001312 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800130e:	2b03      	cmp	r3, #3
 8001310:	d107      	bne.n	8001322 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d109      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e06f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b3b      	ldr	r3, [pc, #236]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e067      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001332:	4b37      	ldr	r3, [pc, #220]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f023 0203 	bic.w	r2, r3, #3
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	4934      	ldr	r1, [pc, #208]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001340:	4313      	orrs	r3, r2
 8001342:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001344:	f7ff fc76 	bl	8000c34 <HAL_GetTick>
 8001348:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800134a:	e00a      	b.n	8001362 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800134c:	f7ff fc72 	bl	8000c34 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	f241 3288 	movw	r2, #5000	; 0x1388
 800135a:	4293      	cmp	r3, r2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e04f      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001362:	4b2b      	ldr	r3, [pc, #172]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 020c 	and.w	r2, r3, #12
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	429a      	cmp	r2, r3
 8001372:	d1eb      	bne.n	800134c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 030f 	and.w	r3, r3, #15
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d20c      	bcs.n	800139c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001382:	4b22      	ldr	r3, [pc, #136]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800138a:	4b20      	ldr	r3, [pc, #128]	; (800140c <HAL_RCC_ClockConfig+0x1b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 030f 	and.w	r3, r3, #15
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d001      	beq.n	800139c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001398:	2301      	movs	r3, #1
 800139a:	e032      	b.n	8001402 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0304 	and.w	r3, r3, #4
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d008      	beq.n	80013ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	4916      	ldr	r1, [pc, #88]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013b6:	4313      	orrs	r3, r2
 80013b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0308 	and.w	r3, r3, #8
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d009      	beq.n	80013da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80013c6:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	490e      	ldr	r1, [pc, #56]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013d6:	4313      	orrs	r3, r2
 80013d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013da:	f000 f855 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 80013de:	4601      	mov	r1, r0
 80013e0:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <HAL_RCC_ClockConfig+0x1bc>)
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 030f 	and.w	r3, r3, #15
 80013ea:	4a0a      	ldr	r2, [pc, #40]	; (8001414 <HAL_RCC_ClockConfig+0x1c0>)
 80013ec:	5cd3      	ldrb	r3, [r2, r3]
 80013ee:	fa21 f303 	lsr.w	r3, r1, r3
 80013f2:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_RCC_ClockConfig+0x1c4>)
 80013f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <HAL_RCC_ClockConfig+0x1c8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff fbd6 	bl	8000bac <HAL_InitTick>

  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023c00 	.word	0x40023c00
 8001410:	40023800 	.word	0x40023800
 8001414:	08002540 	.word	0x08002540
 8001418:	20001b68 	.word	0x20001b68
 800141c:	20001b6c 	.word	0x20001b6c

08001420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001424:	4b03      	ldr	r3, [pc, #12]	; (8001434 <HAL_RCC_GetHCLKFreq+0x14>)
 8001426:	681b      	ldr	r3, [r3, #0]
}
 8001428:	4618      	mov	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	20001b68 	.word	0x20001b68

08001438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800143c:	f7ff fff0 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001440:	4601      	mov	r1, r0
 8001442:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001444:	689b      	ldr	r3, [r3, #8]
 8001446:	0a9b      	lsrs	r3, r3, #10
 8001448:	f003 0307 	and.w	r3, r3, #7
 800144c:	4a03      	ldr	r2, [pc, #12]	; (800145c <HAL_RCC_GetPCLK1Freq+0x24>)
 800144e:	5cd3      	ldrb	r3, [r2, r3]
 8001450:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001454:	4618      	mov	r0, r3
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	08002550 	.word	0x08002550

08001460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001464:	f7ff ffdc 	bl	8001420 <HAL_RCC_GetHCLKFreq>
 8001468:	4601      	mov	r1, r0
 800146a:	4b05      	ldr	r3, [pc, #20]	; (8001480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	0b5b      	lsrs	r3, r3, #13
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	4a03      	ldr	r2, [pc, #12]	; (8001484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	fa21 f303 	lsr.w	r3, r1, r3
}
 800147c:	4618      	mov	r0, r3
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	08002550 	.word	0x08002550

08001488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800149e:	2300      	movs	r3, #0
 80014a0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014a2:	4bc6      	ldr	r3, [pc, #792]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	f003 030c 	and.w	r3, r3, #12
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	f200 817e 	bhi.w	80017ac <HAL_RCC_GetSysClockFreq+0x324>
 80014b0:	a201      	add	r2, pc, #4	; (adr r2, 80014b8 <HAL_RCC_GetSysClockFreq+0x30>)
 80014b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b6:	bf00      	nop
 80014b8:	080014ed 	.word	0x080014ed
 80014bc:	080017ad 	.word	0x080017ad
 80014c0:	080017ad 	.word	0x080017ad
 80014c4:	080017ad 	.word	0x080017ad
 80014c8:	080014f3 	.word	0x080014f3
 80014cc:	080017ad 	.word	0x080017ad
 80014d0:	080017ad 	.word	0x080017ad
 80014d4:	080017ad 	.word	0x080017ad
 80014d8:	080014f9 	.word	0x080014f9
 80014dc:	080017ad 	.word	0x080017ad
 80014e0:	080017ad 	.word	0x080017ad
 80014e4:	080017ad 	.word	0x080017ad
 80014e8:	08001655 	.word	0x08001655
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014ec:	4bb4      	ldr	r3, [pc, #720]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80014ee:	613b      	str	r3, [r7, #16]
       break;
 80014f0:	e15f      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014f2:	4bb4      	ldr	r3, [pc, #720]	; (80017c4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80014f4:	613b      	str	r3, [r7, #16]
      break;
 80014f6:	e15c      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f8:	4bb0      	ldr	r3, [pc, #704]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001500:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001502:	4bae      	ldr	r3, [pc, #696]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d04a      	beq.n	80015a4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150e:	4bab      	ldr	r3, [pc, #684]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	099b      	lsrs	r3, r3, #6
 8001514:	f04f 0400 	mov.w	r4, #0
 8001518:	f240 11ff 	movw	r1, #511	; 0x1ff
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	ea03 0501 	and.w	r5, r3, r1
 8001524:	ea04 0602 	and.w	r6, r4, r2
 8001528:	4629      	mov	r1, r5
 800152a:	4632      	mov	r2, r6
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	f04f 0400 	mov.w	r4, #0
 8001534:	0154      	lsls	r4, r2, #5
 8001536:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800153a:	014b      	lsls	r3, r1, #5
 800153c:	4619      	mov	r1, r3
 800153e:	4622      	mov	r2, r4
 8001540:	1b49      	subs	r1, r1, r5
 8001542:	eb62 0206 	sbc.w	r2, r2, r6
 8001546:	f04f 0300 	mov.w	r3, #0
 800154a:	f04f 0400 	mov.w	r4, #0
 800154e:	0194      	lsls	r4, r2, #6
 8001550:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001554:	018b      	lsls	r3, r1, #6
 8001556:	1a5b      	subs	r3, r3, r1
 8001558:	eb64 0402 	sbc.w	r4, r4, r2
 800155c:	f04f 0100 	mov.w	r1, #0
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	00e2      	lsls	r2, r4, #3
 8001566:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800156a:	00d9      	lsls	r1, r3, #3
 800156c:	460b      	mov	r3, r1
 800156e:	4614      	mov	r4, r2
 8001570:	195b      	adds	r3, r3, r5
 8001572:	eb44 0406 	adc.w	r4, r4, r6
 8001576:	f04f 0100 	mov.w	r1, #0
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	0262      	lsls	r2, r4, #9
 8001580:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001584:	0259      	lsls	r1, r3, #9
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	4618      	mov	r0, r3
 800158c:	4621      	mov	r1, r4
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	f04f 0400 	mov.w	r4, #0
 8001594:	461a      	mov	r2, r3
 8001596:	4623      	mov	r3, r4
 8001598:	f7fe fe34 	bl	8000204 <__aeabi_uldivmod>
 800159c:	4603      	mov	r3, r0
 800159e:	460c      	mov	r4, r1
 80015a0:	617b      	str	r3, [r7, #20]
 80015a2:	e049      	b.n	8001638 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a4:	4b85      	ldr	r3, [pc, #532]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	099b      	lsrs	r3, r3, #6
 80015aa:	f04f 0400 	mov.w	r4, #0
 80015ae:	f240 11ff 	movw	r1, #511	; 0x1ff
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	ea03 0501 	and.w	r5, r3, r1
 80015ba:	ea04 0602 	and.w	r6, r4, r2
 80015be:	4629      	mov	r1, r5
 80015c0:	4632      	mov	r2, r6
 80015c2:	f04f 0300 	mov.w	r3, #0
 80015c6:	f04f 0400 	mov.w	r4, #0
 80015ca:	0154      	lsls	r4, r2, #5
 80015cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80015d0:	014b      	lsls	r3, r1, #5
 80015d2:	4619      	mov	r1, r3
 80015d4:	4622      	mov	r2, r4
 80015d6:	1b49      	subs	r1, r1, r5
 80015d8:	eb62 0206 	sbc.w	r2, r2, r6
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	f04f 0400 	mov.w	r4, #0
 80015e4:	0194      	lsls	r4, r2, #6
 80015e6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015ea:	018b      	lsls	r3, r1, #6
 80015ec:	1a5b      	subs	r3, r3, r1
 80015ee:	eb64 0402 	sbc.w	r4, r4, r2
 80015f2:	f04f 0100 	mov.w	r1, #0
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	00e2      	lsls	r2, r4, #3
 80015fc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001600:	00d9      	lsls	r1, r3, #3
 8001602:	460b      	mov	r3, r1
 8001604:	4614      	mov	r4, r2
 8001606:	195b      	adds	r3, r3, r5
 8001608:	eb44 0406 	adc.w	r4, r4, r6
 800160c:	f04f 0100 	mov.w	r1, #0
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	02a2      	lsls	r2, r4, #10
 8001616:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800161a:	0299      	lsls	r1, r3, #10
 800161c:	460b      	mov	r3, r1
 800161e:	4614      	mov	r4, r2
 8001620:	4618      	mov	r0, r3
 8001622:	4621      	mov	r1, r4
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f04f 0400 	mov.w	r4, #0
 800162a:	461a      	mov	r2, r3
 800162c:	4623      	mov	r3, r4
 800162e:	f7fe fde9 	bl	8000204 <__aeabi_uldivmod>
 8001632:	4603      	mov	r3, r0
 8001634:	460c      	mov	r4, r1
 8001636:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001638:	4b60      	ldr	r3, [pc, #384]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	0c1b      	lsrs	r3, r3, #16
 800163e:	f003 0303 	and.w	r3, r3, #3
 8001642:	3301      	adds	r3, #1
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	68bb      	ldr	r3, [r7, #8]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	613b      	str	r3, [r7, #16]
      break;
 8001652:	e0ae      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001654:	4b59      	ldr	r3, [pc, #356]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800165c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800165e:	4b57      	ldr	r3, [pc, #348]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d04a      	beq.n	8001700 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800166a:	4b54      	ldr	r3, [pc, #336]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	099b      	lsrs	r3, r3, #6
 8001670:	f04f 0400 	mov.w	r4, #0
 8001674:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	ea03 0501 	and.w	r5, r3, r1
 8001680:	ea04 0602 	and.w	r6, r4, r2
 8001684:	4629      	mov	r1, r5
 8001686:	4632      	mov	r2, r6
 8001688:	f04f 0300 	mov.w	r3, #0
 800168c:	f04f 0400 	mov.w	r4, #0
 8001690:	0154      	lsls	r4, r2, #5
 8001692:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001696:	014b      	lsls	r3, r1, #5
 8001698:	4619      	mov	r1, r3
 800169a:	4622      	mov	r2, r4
 800169c:	1b49      	subs	r1, r1, r5
 800169e:	eb62 0206 	sbc.w	r2, r2, r6
 80016a2:	f04f 0300 	mov.w	r3, #0
 80016a6:	f04f 0400 	mov.w	r4, #0
 80016aa:	0194      	lsls	r4, r2, #6
 80016ac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80016b0:	018b      	lsls	r3, r1, #6
 80016b2:	1a5b      	subs	r3, r3, r1
 80016b4:	eb64 0402 	sbc.w	r4, r4, r2
 80016b8:	f04f 0100 	mov.w	r1, #0
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	00e2      	lsls	r2, r4, #3
 80016c2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80016c6:	00d9      	lsls	r1, r3, #3
 80016c8:	460b      	mov	r3, r1
 80016ca:	4614      	mov	r4, r2
 80016cc:	195b      	adds	r3, r3, r5
 80016ce:	eb44 0406 	adc.w	r4, r4, r6
 80016d2:	f04f 0100 	mov.w	r1, #0
 80016d6:	f04f 0200 	mov.w	r2, #0
 80016da:	0262      	lsls	r2, r4, #9
 80016dc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80016e0:	0259      	lsls	r1, r3, #9
 80016e2:	460b      	mov	r3, r1
 80016e4:	4614      	mov	r4, r2
 80016e6:	4618      	mov	r0, r3
 80016e8:	4621      	mov	r1, r4
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	f04f 0400 	mov.w	r4, #0
 80016f0:	461a      	mov	r2, r3
 80016f2:	4623      	mov	r3, r4
 80016f4:	f7fe fd86 	bl	8000204 <__aeabi_uldivmod>
 80016f8:	4603      	mov	r3, r0
 80016fa:	460c      	mov	r4, r1
 80016fc:	617b      	str	r3, [r7, #20]
 80016fe:	e049      	b.n	8001794 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001700:	4b2e      	ldr	r3, [pc, #184]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	099b      	lsrs	r3, r3, #6
 8001706:	f04f 0400 	mov.w	r4, #0
 800170a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	ea03 0501 	and.w	r5, r3, r1
 8001716:	ea04 0602 	and.w	r6, r4, r2
 800171a:	4629      	mov	r1, r5
 800171c:	4632      	mov	r2, r6
 800171e:	f04f 0300 	mov.w	r3, #0
 8001722:	f04f 0400 	mov.w	r4, #0
 8001726:	0154      	lsls	r4, r2, #5
 8001728:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800172c:	014b      	lsls	r3, r1, #5
 800172e:	4619      	mov	r1, r3
 8001730:	4622      	mov	r2, r4
 8001732:	1b49      	subs	r1, r1, r5
 8001734:	eb62 0206 	sbc.w	r2, r2, r6
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	f04f 0400 	mov.w	r4, #0
 8001740:	0194      	lsls	r4, r2, #6
 8001742:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001746:	018b      	lsls	r3, r1, #6
 8001748:	1a5b      	subs	r3, r3, r1
 800174a:	eb64 0402 	sbc.w	r4, r4, r2
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	f04f 0200 	mov.w	r2, #0
 8001756:	00e2      	lsls	r2, r4, #3
 8001758:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800175c:	00d9      	lsls	r1, r3, #3
 800175e:	460b      	mov	r3, r1
 8001760:	4614      	mov	r4, r2
 8001762:	195b      	adds	r3, r3, r5
 8001764:	eb44 0406 	adc.w	r4, r4, r6
 8001768:	f04f 0100 	mov.w	r1, #0
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	02a2      	lsls	r2, r4, #10
 8001772:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001776:	0299      	lsls	r1, r3, #10
 8001778:	460b      	mov	r3, r1
 800177a:	4614      	mov	r4, r2
 800177c:	4618      	mov	r0, r3
 800177e:	4621      	mov	r1, r4
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f04f 0400 	mov.w	r4, #0
 8001786:	461a      	mov	r2, r3
 8001788:	4623      	mov	r3, r4
 800178a:	f7fe fd3b 	bl	8000204 <__aeabi_uldivmod>
 800178e:	4603      	mov	r3, r0
 8001790:	460c      	mov	r4, r1
 8001792:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <HAL_RCC_GetSysClockFreq+0x334>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	0f1b      	lsrs	r3, r3, #28
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80017a0:	697a      	ldr	r2, [r7, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	613b      	str	r3, [r7, #16]
      break;
 80017aa:	e002      	b.n	80017b2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <HAL_RCC_GetSysClockFreq+0x338>)
 80017ae:	613b      	str	r3, [r7, #16]
      break;
 80017b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017b2:	693b      	ldr	r3, [r7, #16]
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017bc:	40023800 	.word	0x40023800
 80017c0:	00f42400 	.word	0x00f42400
 80017c4:	007a1200 	.word	0x007a1200

080017c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b00      	cmp	r3, #0
 80017de:	f000 8083 	beq.w	80018e8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017e2:	4b95      	ldr	r3, [pc, #596]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	f003 030c 	and.w	r3, r3, #12
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d019      	beq.n	8001822 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017ee:	4b92      	ldr	r3, [pc, #584]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d106      	bne.n	8001808 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80017fa:	4b8f      	ldr	r3, [pc, #572]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001802:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001806:	d00c      	beq.n	8001822 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001808:	4b8b      	ldr	r3, [pc, #556]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800180a:	689b      	ldr	r3, [r3, #8]
 800180c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d112      	bne.n	800183a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001814:	4b88      	ldr	r3, [pc, #544]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800181c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001820:	d10b      	bne.n	800183a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001822:	4b85      	ldr	r3, [pc, #532]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d05b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x11e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d157      	bne.n	80018e6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e216      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001842:	d106      	bne.n	8001852 <HAL_RCC_OscConfig+0x8a>
 8001844:	4b7c      	ldr	r3, [pc, #496]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a7b      	ldr	r2, [pc, #492]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800184a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	e01d      	b.n	800188e <HAL_RCC_OscConfig+0xc6>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800185a:	d10c      	bne.n	8001876 <HAL_RCC_OscConfig+0xae>
 800185c:	4b76      	ldr	r3, [pc, #472]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a75      	ldr	r2, [pc, #468]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001862:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	4b73      	ldr	r3, [pc, #460]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a72      	ldr	r2, [pc, #456]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800186e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001872:	6013      	str	r3, [r2, #0]
 8001874:	e00b      	b.n	800188e <HAL_RCC_OscConfig+0xc6>
 8001876:	4b70      	ldr	r3, [pc, #448]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a6f      	ldr	r2, [pc, #444]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800187c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	4b6d      	ldr	r3, [pc, #436]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a6c      	ldr	r2, [pc, #432]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001888:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800188c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d013      	beq.n	80018be <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001896:	f7ff f9cd 	bl	8000c34 <HAL_GetTick>
 800189a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800189e:	f7ff f9c9 	bl	8000c34 <HAL_GetTick>
 80018a2:	4602      	mov	r2, r0
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b64      	cmp	r3, #100	; 0x64
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e1db      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b0:	4b61      	ldr	r3, [pc, #388]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d0f0      	beq.n	800189e <HAL_RCC_OscConfig+0xd6>
 80018bc:	e014      	b.n	80018e8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7ff f9b9 	bl	8000c34 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018c6:	f7ff f9b5 	bl	8000c34 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b64      	cmp	r3, #100	; 0x64
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e1c7      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d8:	4b57      	ldr	r3, [pc, #348]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d1f0      	bne.n	80018c6 <HAL_RCC_OscConfig+0xfe>
 80018e4:	e000      	b.n	80018e8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d06f      	beq.n	80019d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	f003 030c 	and.w	r3, r3, #12
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d017      	beq.n	8001930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001900:	4b4d      	ldr	r3, [pc, #308]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001908:	2b08      	cmp	r3, #8
 800190a:	d105      	bne.n	8001918 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800190c:	4b4a      	ldr	r3, [pc, #296]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d00b      	beq.n	8001930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001918:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001920:	2b0c      	cmp	r3, #12
 8001922:	d11c      	bne.n	800195e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001924:	4b44      	ldr	r3, [pc, #272]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d116      	bne.n	800195e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001930:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_RCC_OscConfig+0x180>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d001      	beq.n	8001948 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e18f      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4938      	ldr	r1, [pc, #224]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195c:	e03a      	b.n	80019d4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d020      	beq.n	80019a8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <HAL_RCC_OscConfig+0x274>)
 8001968:	2201      	movs	r2, #1
 800196a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f962 	bl	8000c34 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001974:	f7ff f95e 	bl	8000c34 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e170      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	4925      	ldr	r1, [pc, #148]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	600b      	str	r3, [r1, #0]
 80019a6:	e015      	b.n	80019d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a8:	4b24      	ldr	r3, [pc, #144]	; (8001a3c <HAL_RCC_OscConfig+0x274>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff f941 	bl	8000c34 <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff f93d 	bl	8000c34 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e14f      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c8:	4b1b      	ldr	r3, [pc, #108]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f003 0302 	and.w	r3, r3, #2
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d037      	beq.n	8001a50 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d016      	beq.n	8001a16 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <HAL_RCC_OscConfig+0x278>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ee:	f7ff f921 	bl	8000c34 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f6:	f7ff f91d 	bl	8000c34 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e12f      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_OscConfig+0x270>)
 8001a0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0f0      	beq.n	80019f6 <HAL_RCC_OscConfig+0x22e>
 8001a14:	e01c      	b.n	8001a50 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_RCC_OscConfig+0x278>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1c:	f7ff f90a 	bl	8000c34 <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a22:	e00f      	b.n	8001a44 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a24:	f7ff f906 	bl	8000c34 <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d908      	bls.n	8001a44 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e118      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
 8001a36:	bf00      	nop
 8001a38:	40023800 	.word	0x40023800
 8001a3c:	42470000 	.word	0x42470000
 8001a40:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a44:	4b8a      	ldr	r3, [pc, #552]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a48:	f003 0302 	and.w	r3, r3, #2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1e9      	bne.n	8001a24 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0304 	and.w	r3, r3, #4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	f000 8097 	beq.w	8001b8c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a62:	4b83      	ldr	r3, [pc, #524]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b7f      	ldr	r3, [pc, #508]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	4a7e      	ldr	r2, [pc, #504]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	4b7c      	ldr	r3, [pc, #496]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8e:	4b79      	ldr	r3, [pc, #484]	; (8001c74 <HAL_RCC_OscConfig+0x4ac>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d118      	bne.n	8001acc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a9a:	4b76      	ldr	r3, [pc, #472]	; (8001c74 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a75      	ldr	r2, [pc, #468]	; (8001c74 <HAL_RCC_OscConfig+0x4ac>)
 8001aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa6:	f7ff f8c5 	bl	8000c34 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aac:	e008      	b.n	8001ac0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aae:	f7ff f8c1 	bl	8000c34 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e0d3      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac0:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d0f0      	beq.n	8001aae <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d106      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x31a>
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ad8:	4a65      	ldr	r2, [pc, #404]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	6713      	str	r3, [r2, #112]	; 0x70
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x354>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b05      	cmp	r3, #5
 8001ae8:	d10c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x33c>
 8001aea:	4b61      	ldr	r3, [pc, #388]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001aee:	4a60      	ldr	r2, [pc, #384]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001af0:	f043 0304 	orr.w	r3, r3, #4
 8001af4:	6713      	str	r3, [r2, #112]	; 0x70
 8001af6:	4b5e      	ldr	r3, [pc, #376]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001afa:	4a5d      	ldr	r2, [pc, #372]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6713      	str	r3, [r2, #112]	; 0x70
 8001b02:	e00b      	b.n	8001b1c <HAL_RCC_OscConfig+0x354>
 8001b04:	4b5a      	ldr	r3, [pc, #360]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b08:	4a59      	ldr	r2, [pc, #356]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b0a:	f023 0301 	bic.w	r3, r3, #1
 8001b0e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b10:	4b57      	ldr	r3, [pc, #348]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b14:	4a56      	ldr	r2, [pc, #344]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b16:	f023 0304 	bic.w	r3, r3, #4
 8001b1a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d015      	beq.n	8001b50 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f886 	bl	8000c34 <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f882 	bl	8000c34 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e092      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d0ee      	beq.n	8001b2c <HAL_RCC_OscConfig+0x364>
 8001b4e:	e014      	b.n	8001b7a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b50:	f7ff f870 	bl	8000c34 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b56:	e00a      	b.n	8001b6e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff f86c 	bl	8000c34 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e07c      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1ee      	bne.n	8001b58 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b7a:	7dfb      	ldrb	r3, [r7, #23]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d105      	bne.n	8001b8c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b80:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b8a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	699b      	ldr	r3, [r3, #24]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d068      	beq.n	8001c66 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b94:	4b36      	ldr	r3, [pc, #216]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f003 030c 	and.w	r3, r3, #12
 8001b9c:	2b08      	cmp	r3, #8
 8001b9e:	d060      	beq.n	8001c62 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d145      	bne.n	8001c34 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba8:	4b33      	ldr	r3, [pc, #204]	; (8001c78 <HAL_RCC_OscConfig+0x4b0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f841 	bl	8000c34 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f83d 	bl	8000c34 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e04f      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d1f0      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69da      	ldr	r2, [r3, #28]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be2:	019b      	lsls	r3, r3, #6
 8001be4:	431a      	orrs	r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bea:	085b      	lsrs	r3, r3, #1
 8001bec:	3b01      	subs	r3, #1
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	431a      	orrs	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf6:	061b      	lsls	r3, r3, #24
 8001bf8:	431a      	orrs	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	071b      	lsls	r3, r3, #28
 8001c00:	491b      	ldr	r1, [pc, #108]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c06:	4b1c      	ldr	r3, [pc, #112]	; (8001c78 <HAL_RCC_OscConfig+0x4b0>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f812 	bl	8000c34 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c14:	f7ff f80e 	bl	8000c34 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e020      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c26:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x44c>
 8001c32:	e018      	b.n	8001c66 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c34:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_RCC_OscConfig+0x4b0>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3a:	f7fe fffb 	bl	8000c34 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c40:	e008      	b.n	8001c54 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c42:	f7fe fff7 	bl	8000c34 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e009      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_RCC_OscConfig+0x4a8>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d1f0      	bne.n	8001c42 <HAL_RCC_OscConfig+0x47a>
 8001c60:	e001      	b.n	8001c66 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8001c66:	2300      	movs	r3, #0
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000
 8001c78:	42470060 	.word	0x42470060

08001c7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e056      	b.n	8001d3c <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d106      	bne.n	8001cae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe fddd 	bl	8000868 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2202      	movs	r2, #2
 8001cb2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	685a      	ldr	r2, [r3, #4]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	695b      	ldr	r3, [r3, #20]
 8001ce0:	431a      	orrs	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	69db      	ldr	r3, [r3, #28]
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a1b      	ldr	r3, [r3, #32]
 8001cf6:	ea42 0103 	orr.w	r1, r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	699b      	ldr	r3, [r3, #24]
 8001d0a:	0c1b      	lsrs	r3, r3, #16
 8001d0c:	f003 0104 	and.w	r1, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	430a      	orrs	r2, r1
 8001d1a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	69da      	ldr	r2, [r3, #28]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3708      	adds	r7, #8
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d101      	bne.n	8001d56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e03f      	b.n	8001dd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d106      	bne.n	8001d70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d6a:	6878      	ldr	r0, [r7, #4]
 8001d6c:	f7fe fe8a 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2224      	movs	r2, #36	; 0x24
 8001d74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68da      	ldr	r2, [r3, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001d88:	6878      	ldr	r0, [r7, #4]
 8001d8a:	f000 f829 	bl	8001de0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001d9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695a      	ldr	r2, [r3, #20]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001dac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68da      	ldr	r2, [r3, #12]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001dbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2220      	movs	r2, #32
 8001dc8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001de4:	b085      	sub	sp, #20
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001e22:	f023 030c 	bic.w	r3, r3, #12
 8001e26:	687a      	ldr	r2, [r7, #4]
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	68f9      	ldr	r1, [r7, #12]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	699a      	ldr	r2, [r3, #24]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	430a      	orrs	r2, r1
 8001e44:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e4e:	f040 818b 	bne.w	8002168 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4ac1      	ldr	r2, [pc, #772]	; (800215c <UART_SetConfig+0x37c>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d005      	beq.n	8001e68 <UART_SetConfig+0x88>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4abf      	ldr	r2, [pc, #764]	; (8002160 <UART_SetConfig+0x380>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	f040 80bd 	bne.w	8001fe2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e68:	f7ff fafa 	bl	8001460 <HAL_RCC_GetPCLK2Freq>
 8001e6c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	461d      	mov	r5, r3
 8001e72:	f04f 0600 	mov.w	r6, #0
 8001e76:	46a8      	mov	r8, r5
 8001e78:	46b1      	mov	r9, r6
 8001e7a:	eb18 0308 	adds.w	r3, r8, r8
 8001e7e:	eb49 0409 	adc.w	r4, r9, r9
 8001e82:	4698      	mov	r8, r3
 8001e84:	46a1      	mov	r9, r4
 8001e86:	eb18 0805 	adds.w	r8, r8, r5
 8001e8a:	eb49 0906 	adc.w	r9, r9, r6
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	f04f 0200 	mov.w	r2, #0
 8001e96:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001e9a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001e9e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001ea2:	4688      	mov	r8, r1
 8001ea4:	4691      	mov	r9, r2
 8001ea6:	eb18 0005 	adds.w	r0, r8, r5
 8001eaa:	eb49 0106 	adc.w	r1, r9, r6
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	461d      	mov	r5, r3
 8001eb4:	f04f 0600 	mov.w	r6, #0
 8001eb8:	196b      	adds	r3, r5, r5
 8001eba:	eb46 0406 	adc.w	r4, r6, r6
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	4623      	mov	r3, r4
 8001ec2:	f7fe f99f 	bl	8000204 <__aeabi_uldivmod>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	460c      	mov	r4, r1
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4ba5      	ldr	r3, [pc, #660]	; (8002164 <UART_SetConfig+0x384>)
 8001ece:	fba3 2302 	umull	r2, r3, r3, r2
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	461d      	mov	r5, r3
 8001edc:	f04f 0600 	mov.w	r6, #0
 8001ee0:	46a9      	mov	r9, r5
 8001ee2:	46b2      	mov	sl, r6
 8001ee4:	eb19 0309 	adds.w	r3, r9, r9
 8001ee8:	eb4a 040a 	adc.w	r4, sl, sl
 8001eec:	4699      	mov	r9, r3
 8001eee:	46a2      	mov	sl, r4
 8001ef0:	eb19 0905 	adds.w	r9, r9, r5
 8001ef4:	eb4a 0a06 	adc.w	sl, sl, r6
 8001ef8:	f04f 0100 	mov.w	r1, #0
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f0c:	4689      	mov	r9, r1
 8001f0e:	4692      	mov	sl, r2
 8001f10:	eb19 0005 	adds.w	r0, r9, r5
 8001f14:	eb4a 0106 	adc.w	r1, sl, r6
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	461d      	mov	r5, r3
 8001f1e:	f04f 0600 	mov.w	r6, #0
 8001f22:	196b      	adds	r3, r5, r5
 8001f24:	eb46 0406 	adc.w	r4, r6, r6
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4623      	mov	r3, r4
 8001f2c:	f7fe f96a 	bl	8000204 <__aeabi_uldivmod>
 8001f30:	4603      	mov	r3, r0
 8001f32:	460c      	mov	r4, r1
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b8b      	ldr	r3, [pc, #556]	; (8002164 <UART_SetConfig+0x384>)
 8001f38:	fba3 1302 	umull	r1, r3, r3, r2
 8001f3c:	095b      	lsrs	r3, r3, #5
 8001f3e:	2164      	movs	r1, #100	; 0x64
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	00db      	lsls	r3, r3, #3
 8001f48:	3332      	adds	r3, #50	; 0x32
 8001f4a:	4a86      	ldr	r2, [pc, #536]	; (8002164 <UART_SetConfig+0x384>)
 8001f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f50:	095b      	lsrs	r3, r3, #5
 8001f52:	005b      	lsls	r3, r3, #1
 8001f54:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f58:	4498      	add	r8, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	461d      	mov	r5, r3
 8001f5e:	f04f 0600 	mov.w	r6, #0
 8001f62:	46a9      	mov	r9, r5
 8001f64:	46b2      	mov	sl, r6
 8001f66:	eb19 0309 	adds.w	r3, r9, r9
 8001f6a:	eb4a 040a 	adc.w	r4, sl, sl
 8001f6e:	4699      	mov	r9, r3
 8001f70:	46a2      	mov	sl, r4
 8001f72:	eb19 0905 	adds.w	r9, r9, r5
 8001f76:	eb4a 0a06 	adc.w	sl, sl, r6
 8001f7a:	f04f 0100 	mov.w	r1, #0
 8001f7e:	f04f 0200 	mov.w	r2, #0
 8001f82:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f86:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8001f8a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8001f8e:	4689      	mov	r9, r1
 8001f90:	4692      	mov	sl, r2
 8001f92:	eb19 0005 	adds.w	r0, r9, r5
 8001f96:	eb4a 0106 	adc.w	r1, sl, r6
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	461d      	mov	r5, r3
 8001fa0:	f04f 0600 	mov.w	r6, #0
 8001fa4:	196b      	adds	r3, r5, r5
 8001fa6:	eb46 0406 	adc.w	r4, r6, r6
 8001faa:	461a      	mov	r2, r3
 8001fac:	4623      	mov	r3, r4
 8001fae:	f7fe f929 	bl	8000204 <__aeabi_uldivmod>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	460c      	mov	r4, r1
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <UART_SetConfig+0x384>)
 8001fba:	fba3 1302 	umull	r1, r3, r3, r2
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	2164      	movs	r1, #100	; 0x64
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	1ad3      	subs	r3, r2, r3
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	3332      	adds	r3, #50	; 0x32
 8001fcc:	4a65      	ldr	r2, [pc, #404]	; (8002164 <UART_SetConfig+0x384>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	095b      	lsrs	r3, r3, #5
 8001fd4:	f003 0207 	and.w	r2, r3, #7
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4442      	add	r2, r8
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	e26f      	b.n	80024c2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001fe2:	f7ff fa29 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 8001fe6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	461d      	mov	r5, r3
 8001fec:	f04f 0600 	mov.w	r6, #0
 8001ff0:	46a8      	mov	r8, r5
 8001ff2:	46b1      	mov	r9, r6
 8001ff4:	eb18 0308 	adds.w	r3, r8, r8
 8001ff8:	eb49 0409 	adc.w	r4, r9, r9
 8001ffc:	4698      	mov	r8, r3
 8001ffe:	46a1      	mov	r9, r4
 8002000:	eb18 0805 	adds.w	r8, r8, r5
 8002004:	eb49 0906 	adc.w	r9, r9, r6
 8002008:	f04f 0100 	mov.w	r1, #0
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002014:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002018:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800201c:	4688      	mov	r8, r1
 800201e:	4691      	mov	r9, r2
 8002020:	eb18 0005 	adds.w	r0, r8, r5
 8002024:	eb49 0106 	adc.w	r1, r9, r6
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	461d      	mov	r5, r3
 800202e:	f04f 0600 	mov.w	r6, #0
 8002032:	196b      	adds	r3, r5, r5
 8002034:	eb46 0406 	adc.w	r4, r6, r6
 8002038:	461a      	mov	r2, r3
 800203a:	4623      	mov	r3, r4
 800203c:	f7fe f8e2 	bl	8000204 <__aeabi_uldivmod>
 8002040:	4603      	mov	r3, r0
 8002042:	460c      	mov	r4, r1
 8002044:	461a      	mov	r2, r3
 8002046:	4b47      	ldr	r3, [pc, #284]	; (8002164 <UART_SetConfig+0x384>)
 8002048:	fba3 2302 	umull	r2, r3, r3, r2
 800204c:	095b      	lsrs	r3, r3, #5
 800204e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	461d      	mov	r5, r3
 8002056:	f04f 0600 	mov.w	r6, #0
 800205a:	46a9      	mov	r9, r5
 800205c:	46b2      	mov	sl, r6
 800205e:	eb19 0309 	adds.w	r3, r9, r9
 8002062:	eb4a 040a 	adc.w	r4, sl, sl
 8002066:	4699      	mov	r9, r3
 8002068:	46a2      	mov	sl, r4
 800206a:	eb19 0905 	adds.w	r9, r9, r5
 800206e:	eb4a 0a06 	adc.w	sl, sl, r6
 8002072:	f04f 0100 	mov.w	r1, #0
 8002076:	f04f 0200 	mov.w	r2, #0
 800207a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800207e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002082:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002086:	4689      	mov	r9, r1
 8002088:	4692      	mov	sl, r2
 800208a:	eb19 0005 	adds.w	r0, r9, r5
 800208e:	eb4a 0106 	adc.w	r1, sl, r6
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	461d      	mov	r5, r3
 8002098:	f04f 0600 	mov.w	r6, #0
 800209c:	196b      	adds	r3, r5, r5
 800209e:	eb46 0406 	adc.w	r4, r6, r6
 80020a2:	461a      	mov	r2, r3
 80020a4:	4623      	mov	r3, r4
 80020a6:	f7fe f8ad 	bl	8000204 <__aeabi_uldivmod>
 80020aa:	4603      	mov	r3, r0
 80020ac:	460c      	mov	r4, r1
 80020ae:	461a      	mov	r2, r3
 80020b0:	4b2c      	ldr	r3, [pc, #176]	; (8002164 <UART_SetConfig+0x384>)
 80020b2:	fba3 1302 	umull	r1, r3, r3, r2
 80020b6:	095b      	lsrs	r3, r3, #5
 80020b8:	2164      	movs	r1, #100	; 0x64
 80020ba:	fb01 f303 	mul.w	r3, r1, r3
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	3332      	adds	r3, #50	; 0x32
 80020c4:	4a27      	ldr	r2, [pc, #156]	; (8002164 <UART_SetConfig+0x384>)
 80020c6:	fba2 2303 	umull	r2, r3, r2, r3
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80020d2:	4498      	add	r8, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	461d      	mov	r5, r3
 80020d8:	f04f 0600 	mov.w	r6, #0
 80020dc:	46a9      	mov	r9, r5
 80020de:	46b2      	mov	sl, r6
 80020e0:	eb19 0309 	adds.w	r3, r9, r9
 80020e4:	eb4a 040a 	adc.w	r4, sl, sl
 80020e8:	4699      	mov	r9, r3
 80020ea:	46a2      	mov	sl, r4
 80020ec:	eb19 0905 	adds.w	r9, r9, r5
 80020f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002100:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002104:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002108:	4689      	mov	r9, r1
 800210a:	4692      	mov	sl, r2
 800210c:	eb19 0005 	adds.w	r0, r9, r5
 8002110:	eb4a 0106 	adc.w	r1, sl, r6
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	461d      	mov	r5, r3
 800211a:	f04f 0600 	mov.w	r6, #0
 800211e:	196b      	adds	r3, r5, r5
 8002120:	eb46 0406 	adc.w	r4, r6, r6
 8002124:	461a      	mov	r2, r3
 8002126:	4623      	mov	r3, r4
 8002128:	f7fe f86c 	bl	8000204 <__aeabi_uldivmod>
 800212c:	4603      	mov	r3, r0
 800212e:	460c      	mov	r4, r1
 8002130:	461a      	mov	r2, r3
 8002132:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <UART_SetConfig+0x384>)
 8002134:	fba3 1302 	umull	r1, r3, r3, r2
 8002138:	095b      	lsrs	r3, r3, #5
 800213a:	2164      	movs	r1, #100	; 0x64
 800213c:	fb01 f303 	mul.w	r3, r1, r3
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	3332      	adds	r3, #50	; 0x32
 8002146:	4a07      	ldr	r2, [pc, #28]	; (8002164 <UART_SetConfig+0x384>)
 8002148:	fba2 2303 	umull	r2, r3, r2, r3
 800214c:	095b      	lsrs	r3, r3, #5
 800214e:	f003 0207 	and.w	r2, r3, #7
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4442      	add	r2, r8
 8002158:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800215a:	e1b2      	b.n	80024c2 <UART_SetConfig+0x6e2>
 800215c:	40011000 	.word	0x40011000
 8002160:	40011400 	.word	0x40011400
 8002164:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4ad7      	ldr	r2, [pc, #860]	; (80024cc <UART_SetConfig+0x6ec>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d005      	beq.n	800217e <UART_SetConfig+0x39e>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4ad6      	ldr	r2, [pc, #856]	; (80024d0 <UART_SetConfig+0x6f0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	f040 80d1 	bne.w	8002320 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800217e:	f7ff f96f 	bl	8001460 <HAL_RCC_GetPCLK2Freq>
 8002182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	469a      	mov	sl, r3
 8002188:	f04f 0b00 	mov.w	fp, #0
 800218c:	46d0      	mov	r8, sl
 800218e:	46d9      	mov	r9, fp
 8002190:	eb18 0308 	adds.w	r3, r8, r8
 8002194:	eb49 0409 	adc.w	r4, r9, r9
 8002198:	4698      	mov	r8, r3
 800219a:	46a1      	mov	r9, r4
 800219c:	eb18 080a 	adds.w	r8, r8, sl
 80021a0:	eb49 090b 	adc.w	r9, r9, fp
 80021a4:	f04f 0100 	mov.w	r1, #0
 80021a8:	f04f 0200 	mov.w	r2, #0
 80021ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021b8:	4688      	mov	r8, r1
 80021ba:	4691      	mov	r9, r2
 80021bc:	eb1a 0508 	adds.w	r5, sl, r8
 80021c0:	eb4b 0609 	adc.w	r6, fp, r9
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	4619      	mov	r1, r3
 80021ca:	f04f 0200 	mov.w	r2, #0
 80021ce:	f04f 0300 	mov.w	r3, #0
 80021d2:	f04f 0400 	mov.w	r4, #0
 80021d6:	0094      	lsls	r4, r2, #2
 80021d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80021dc:	008b      	lsls	r3, r1, #2
 80021de:	461a      	mov	r2, r3
 80021e0:	4623      	mov	r3, r4
 80021e2:	4628      	mov	r0, r5
 80021e4:	4631      	mov	r1, r6
 80021e6:	f7fe f80d 	bl	8000204 <__aeabi_uldivmod>
 80021ea:	4603      	mov	r3, r0
 80021ec:	460c      	mov	r4, r1
 80021ee:	461a      	mov	r2, r3
 80021f0:	4bb8      	ldr	r3, [pc, #736]	; (80024d4 <UART_SetConfig+0x6f4>)
 80021f2:	fba3 2302 	umull	r2, r3, r3, r2
 80021f6:	095b      	lsrs	r3, r3, #5
 80021f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	469b      	mov	fp, r3
 8002200:	f04f 0c00 	mov.w	ip, #0
 8002204:	46d9      	mov	r9, fp
 8002206:	46e2      	mov	sl, ip
 8002208:	eb19 0309 	adds.w	r3, r9, r9
 800220c:	eb4a 040a 	adc.w	r4, sl, sl
 8002210:	4699      	mov	r9, r3
 8002212:	46a2      	mov	sl, r4
 8002214:	eb19 090b 	adds.w	r9, r9, fp
 8002218:	eb4a 0a0c 	adc.w	sl, sl, ip
 800221c:	f04f 0100 	mov.w	r1, #0
 8002220:	f04f 0200 	mov.w	r2, #0
 8002224:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002228:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800222c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002230:	4689      	mov	r9, r1
 8002232:	4692      	mov	sl, r2
 8002234:	eb1b 0509 	adds.w	r5, fp, r9
 8002238:	eb4c 060a 	adc.w	r6, ip, sl
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4619      	mov	r1, r3
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	f04f 0400 	mov.w	r4, #0
 800224e:	0094      	lsls	r4, r2, #2
 8002250:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002254:	008b      	lsls	r3, r1, #2
 8002256:	461a      	mov	r2, r3
 8002258:	4623      	mov	r3, r4
 800225a:	4628      	mov	r0, r5
 800225c:	4631      	mov	r1, r6
 800225e:	f7fd ffd1 	bl	8000204 <__aeabi_uldivmod>
 8002262:	4603      	mov	r3, r0
 8002264:	460c      	mov	r4, r1
 8002266:	461a      	mov	r2, r3
 8002268:	4b9a      	ldr	r3, [pc, #616]	; (80024d4 <UART_SetConfig+0x6f4>)
 800226a:	fba3 1302 	umull	r1, r3, r3, r2
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	2164      	movs	r1, #100	; 0x64
 8002272:	fb01 f303 	mul.w	r3, r1, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	011b      	lsls	r3, r3, #4
 800227a:	3332      	adds	r3, #50	; 0x32
 800227c:	4a95      	ldr	r2, [pc, #596]	; (80024d4 <UART_SetConfig+0x6f4>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002288:	4498      	add	r8, r3
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	469b      	mov	fp, r3
 800228e:	f04f 0c00 	mov.w	ip, #0
 8002292:	46d9      	mov	r9, fp
 8002294:	46e2      	mov	sl, ip
 8002296:	eb19 0309 	adds.w	r3, r9, r9
 800229a:	eb4a 040a 	adc.w	r4, sl, sl
 800229e:	4699      	mov	r9, r3
 80022a0:	46a2      	mov	sl, r4
 80022a2:	eb19 090b 	adds.w	r9, r9, fp
 80022a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80022aa:	f04f 0100 	mov.w	r1, #0
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022be:	4689      	mov	r9, r1
 80022c0:	4692      	mov	sl, r2
 80022c2:	eb1b 0509 	adds.w	r5, fp, r9
 80022c6:	eb4c 060a 	adc.w	r6, ip, sl
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4619      	mov	r1, r3
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	f04f 0300 	mov.w	r3, #0
 80022d8:	f04f 0400 	mov.w	r4, #0
 80022dc:	0094      	lsls	r4, r2, #2
 80022de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022e2:	008b      	lsls	r3, r1, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	4628      	mov	r0, r5
 80022ea:	4631      	mov	r1, r6
 80022ec:	f7fd ff8a 	bl	8000204 <__aeabi_uldivmod>
 80022f0:	4603      	mov	r3, r0
 80022f2:	460c      	mov	r4, r1
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b77      	ldr	r3, [pc, #476]	; (80024d4 <UART_SetConfig+0x6f4>)
 80022f8:	fba3 1302 	umull	r1, r3, r3, r2
 80022fc:	095b      	lsrs	r3, r3, #5
 80022fe:	2164      	movs	r1, #100	; 0x64
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	3332      	adds	r3, #50	; 0x32
 800230a:	4a72      	ldr	r2, [pc, #456]	; (80024d4 <UART_SetConfig+0x6f4>)
 800230c:	fba2 2303 	umull	r2, r3, r2, r3
 8002310:	095b      	lsrs	r3, r3, #5
 8002312:	f003 020f 	and.w	r2, r3, #15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4442      	add	r2, r8
 800231c:	609a      	str	r2, [r3, #8]
 800231e:	e0d0      	b.n	80024c2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002320:	f7ff f88a 	bl	8001438 <HAL_RCC_GetPCLK1Freq>
 8002324:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	469a      	mov	sl, r3
 800232a:	f04f 0b00 	mov.w	fp, #0
 800232e:	46d0      	mov	r8, sl
 8002330:	46d9      	mov	r9, fp
 8002332:	eb18 0308 	adds.w	r3, r8, r8
 8002336:	eb49 0409 	adc.w	r4, r9, r9
 800233a:	4698      	mov	r8, r3
 800233c:	46a1      	mov	r9, r4
 800233e:	eb18 080a 	adds.w	r8, r8, sl
 8002342:	eb49 090b 	adc.w	r9, r9, fp
 8002346:	f04f 0100 	mov.w	r1, #0
 800234a:	f04f 0200 	mov.w	r2, #0
 800234e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002352:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002356:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800235a:	4688      	mov	r8, r1
 800235c:	4691      	mov	r9, r2
 800235e:	eb1a 0508 	adds.w	r5, sl, r8
 8002362:	eb4b 0609 	adc.w	r6, fp, r9
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	4619      	mov	r1, r3
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	f04f 0300 	mov.w	r3, #0
 8002374:	f04f 0400 	mov.w	r4, #0
 8002378:	0094      	lsls	r4, r2, #2
 800237a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800237e:	008b      	lsls	r3, r1, #2
 8002380:	461a      	mov	r2, r3
 8002382:	4623      	mov	r3, r4
 8002384:	4628      	mov	r0, r5
 8002386:	4631      	mov	r1, r6
 8002388:	f7fd ff3c 	bl	8000204 <__aeabi_uldivmod>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	461a      	mov	r2, r3
 8002392:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <UART_SetConfig+0x6f4>)
 8002394:	fba3 2302 	umull	r2, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	469b      	mov	fp, r3
 80023a2:	f04f 0c00 	mov.w	ip, #0
 80023a6:	46d9      	mov	r9, fp
 80023a8:	46e2      	mov	sl, ip
 80023aa:	eb19 0309 	adds.w	r3, r9, r9
 80023ae:	eb4a 040a 	adc.w	r4, sl, sl
 80023b2:	4699      	mov	r9, r3
 80023b4:	46a2      	mov	sl, r4
 80023b6:	eb19 090b 	adds.w	r9, r9, fp
 80023ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023d2:	4689      	mov	r9, r1
 80023d4:	4692      	mov	sl, r2
 80023d6:	eb1b 0509 	adds.w	r5, fp, r9
 80023da:	eb4c 060a 	adc.w	r6, ip, sl
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4619      	mov	r1, r3
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f04f 0400 	mov.w	r4, #0
 80023f0:	0094      	lsls	r4, r2, #2
 80023f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023f6:	008b      	lsls	r3, r1, #2
 80023f8:	461a      	mov	r2, r3
 80023fa:	4623      	mov	r3, r4
 80023fc:	4628      	mov	r0, r5
 80023fe:	4631      	mov	r1, r6
 8002400:	f7fd ff00 	bl	8000204 <__aeabi_uldivmod>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	461a      	mov	r2, r3
 800240a:	4b32      	ldr	r3, [pc, #200]	; (80024d4 <UART_SetConfig+0x6f4>)
 800240c:	fba3 1302 	umull	r1, r3, r3, r2
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	2164      	movs	r1, #100	; 0x64
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	3332      	adds	r3, #50	; 0x32
 800241e:	4a2d      	ldr	r2, [pc, #180]	; (80024d4 <UART_SetConfig+0x6f4>)
 8002420:	fba2 2303 	umull	r2, r3, r2, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800242a:	4498      	add	r8, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	469b      	mov	fp, r3
 8002430:	f04f 0c00 	mov.w	ip, #0
 8002434:	46d9      	mov	r9, fp
 8002436:	46e2      	mov	sl, ip
 8002438:	eb19 0309 	adds.w	r3, r9, r9
 800243c:	eb4a 040a 	adc.w	r4, sl, sl
 8002440:	4699      	mov	r9, r3
 8002442:	46a2      	mov	sl, r4
 8002444:	eb19 090b 	adds.w	r9, r9, fp
 8002448:	eb4a 0a0c 	adc.w	sl, sl, ip
 800244c:	f04f 0100 	mov.w	r1, #0
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002458:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800245c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002460:	4689      	mov	r9, r1
 8002462:	4692      	mov	sl, r2
 8002464:	eb1b 0509 	adds.w	r5, fp, r9
 8002468:	eb4c 060a 	adc.w	r6, ip, sl
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	4619      	mov	r1, r3
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	f04f 0400 	mov.w	r4, #0
 800247e:	0094      	lsls	r4, r2, #2
 8002480:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002484:	008b      	lsls	r3, r1, #2
 8002486:	461a      	mov	r2, r3
 8002488:	4623      	mov	r3, r4
 800248a:	4628      	mov	r0, r5
 800248c:	4631      	mov	r1, r6
 800248e:	f7fd feb9 	bl	8000204 <__aeabi_uldivmod>
 8002492:	4603      	mov	r3, r0
 8002494:	460c      	mov	r4, r1
 8002496:	461a      	mov	r2, r3
 8002498:	4b0e      	ldr	r3, [pc, #56]	; (80024d4 <UART_SetConfig+0x6f4>)
 800249a:	fba3 1302 	umull	r1, r3, r3, r2
 800249e:	095b      	lsrs	r3, r3, #5
 80024a0:	2164      	movs	r1, #100	; 0x64
 80024a2:	fb01 f303 	mul.w	r3, r1, r3
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	011b      	lsls	r3, r3, #4
 80024aa:	3332      	adds	r3, #50	; 0x32
 80024ac:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <UART_SetConfig+0x6f4>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	f003 020f 	and.w	r2, r3, #15
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4442      	add	r2, r8
 80024be:	609a      	str	r2, [r3, #8]
}
 80024c0:	e7ff      	b.n	80024c2 <UART_SetConfig+0x6e2>
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80024cc:	40011000 	.word	0x40011000
 80024d0:	40011400 	.word	0x40011400
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <arm_mat_init_f32>:
 80024d8:	8001      	strh	r1, [r0, #0]
 80024da:	8042      	strh	r2, [r0, #2]
 80024dc:	6043      	str	r3, [r0, #4]
 80024de:	4770      	bx	lr

080024e0 <__libc_init_array>:
 80024e0:	b570      	push	{r4, r5, r6, lr}
 80024e2:	4e0d      	ldr	r6, [pc, #52]	; (8002518 <__libc_init_array+0x38>)
 80024e4:	4c0d      	ldr	r4, [pc, #52]	; (800251c <__libc_init_array+0x3c>)
 80024e6:	1ba4      	subs	r4, r4, r6
 80024e8:	10a4      	asrs	r4, r4, #2
 80024ea:	2500      	movs	r5, #0
 80024ec:	42a5      	cmp	r5, r4
 80024ee:	d109      	bne.n	8002504 <__libc_init_array+0x24>
 80024f0:	4e0b      	ldr	r6, [pc, #44]	; (8002520 <__libc_init_array+0x40>)
 80024f2:	4c0c      	ldr	r4, [pc, #48]	; (8002524 <__libc_init_array+0x44>)
 80024f4:	f000 f818 	bl	8002528 <_init>
 80024f8:	1ba4      	subs	r4, r4, r6
 80024fa:	10a4      	asrs	r4, r4, #2
 80024fc:	2500      	movs	r5, #0
 80024fe:	42a5      	cmp	r5, r4
 8002500:	d105      	bne.n	800250e <__libc_init_array+0x2e>
 8002502:	bd70      	pop	{r4, r5, r6, pc}
 8002504:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002508:	4798      	blx	r3
 800250a:	3501      	adds	r5, #1
 800250c:	e7ee      	b.n	80024ec <__libc_init_array+0xc>
 800250e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002512:	4798      	blx	r3
 8002514:	3501      	adds	r5, #1
 8002516:	e7f2      	b.n	80024fe <__libc_init_array+0x1e>
 8002518:	08002560 	.word	0x08002560
 800251c:	08002560 	.word	0x08002560
 8002520:	08002560 	.word	0x08002560
 8002524:	08002564 	.word	0x08002564

08002528 <_init>:
 8002528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800252a:	bf00      	nop
 800252c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252e:	bc08      	pop	{r3}
 8002530:	469e      	mov	lr, r3
 8002532:	4770      	bx	lr

08002534 <_fini>:
 8002534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002536:	bf00      	nop
 8002538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800253a:	bc08      	pop	{r3}
 800253c:	469e      	mov	lr, r3
 800253e:	4770      	bx	lr
